##
## Send all known bots to $args free URLs.
##
map $http_user_agent $is_bot {
    default  '';
    ~*crawl|goog|yahoo|yandex|spider|bot|tracker|click|parser is_bot;
}
map $http_cookie $drupal_boost_try_files {
    # sites/default/files/boost/example.com/home.html, this is added by boost module.
    default /sites/default/files/boost/${host}${request_uri}.html;
    ~Drupal.visitor.DRUPAL_UID "";
}
map $http_cookie$query_string $drupal_boost_try_files_homepage {
    default /sites/default/files/boost/${host}/index.html;
    ~Drupal.visitor.DRUPAL_UID "";
    ~force-boost-warm= "";
}
map $http_cookie $drupal_boost_header {
    default /sites/default/files/boost/${host}${request_uri}.html;
    ~Drupal.visitor.DRUPAL_UID "";
}

## Reference: https://www.nginx.com/resources/wiki/start/topics/recipes/drupal/
server {
    listen 80;
    root /var/www/html;
    access_log  /dev/stdout main;

    # logs by date
    # if ($time_iso8601 ~ '(\d{4}-\d{2}-\d{2})'){
    #     set $ttt $1;
    # }
    # access_log  logs/access.$ttt.log;

    add_header X-Frame-Options SAMEORIGIN;
    add_header Content-Security-Policy "default-src 'self';";
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Adding Access-Control-Allow-Origin to all request
    #add_header 'Access-Control-Allow-Origin' '*' always;
    #add_header 'Access-Control-Allow-Credentials' 'true' always;
    #add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-CustomHeader,X-Requested-With,X-Mx-ReqToken' always;
    #add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
    include /etc/nginx/vhost.d/pre-*.conf;
    # subdir support, see https://blog.rebootr.nl/drupal-8-in-a-subdirectory-with-nginx/
    location @rewrite_subdir {
        rewrite ^ /index.php;
    }
    location = /fake-subdir-placeholder {
        return 301 /fake-subdir-placeholder/;
    }
    location ~ /fake-subdir-placeholder/(.*) {
        try_files /$1 @rewrite_subdir;
    }
    ## For Security.
    location ~ README.txt|README.md|CHANGELOG.txt|INSTALL.txt|config.rb|web.config|composer\.(json|lock)|(package|package-lock)\.json|yarn\.lock|transliteration_data.php.txt {
        return 404;
    }
    # Replica of regex from Drupals core .htaccess.
    location ~* \.(engine|txt|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml|yaml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock)|(package|package-lock)\.json|yarn\.lock)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
        return 404;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location ~ \..*/.*\.php$ {
        return 403;
    }

    location ~ ^/sites/.*/private/ {
        return 403;
    }

    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
        allow all;
    }

    # Block access to "hidden" files and directories whose names begin with a
    # period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.
    location ~ (^|/)\. {
        return 403;
    }

    location = / {
        try_files $uri $drupal_boost_try_files_homepage /index.php/?$query_string;
    }
    #location = /test {
        #add_header Content-Type text/plain;
        #return 200 $drupal_boost_try_files_homepage;
    #}
    location / {
        try_files $uri $drupal_boost_try_files /index.php?$query_string;
    }

    location @rewrite {
        rewrite ^/(.*)$ /index.php?q=$1;
    }

    # Don't allow direct access to PHP files in the vendor directory.
    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    # In Drupal 8, we must also match new paths where the '.php' appears in
    # the middle, such as update.php/selection. The rule we use is strict,
    # and only allows this pattern with the update.php front controller.
    # This allows legacy path aliases in the form of
    # blog/index.php/legacy-path to continue to route to Drupal nodes. If
    # you do not have any paths like that, then you might prefer to use a
    # laxer rule, such as:
    #   location ~ \.php(/|$) {
    # The laxer rule will continue to work if Drupal uses this new URL
    # pattern with front controllers other than update.php in a future
    # release.
    location ~ '\.php$|^/update.php' {
        #try_files $uri /sites/default/files/boost/${host}/index.html /index.php/;
	fastcgi_hide_header X-Generator;
        fastcgi_buffer_size 256k;
        fastcgi_buffers 32 64k;
        fastcgi_temp_path /tmp/nginx-fastcgi;
        fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        include fastcgi_params;
        # Block httpoxy attacks. See https://httpoxy.org/.
        fastcgi_param HTTP_PROXY "";
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_intercept_errors on;
        fastcgi_pass unix:/run/php-fpm.sock;
    }

    # Fighting with Styles? This little gem is amazing.
    # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
    location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
        try_files $uri @rewrite;
    }

    #  Catch image styles for D7.
    location ~ ^/sites/.*/files/ {
        log_not_found off;
        expires 1y;
        add_header Pragma public;
        add_header Cache-Control "public, max-age=2592000";
        add_header locationheader 1;
        add_header X-Micro-Cache $upstream_cache_status;
        try_files $uri @rewrite;
    }

    location ~ ^/sites/.*/files/styles/.*/public/ {
        try_files $uri @rewrite;
    }

    location ~* ^(?!/system/files).*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|mp4|mkv|mov|wmv|avi)$ {
        #If the image does not exist, maybe it must be generated by drupal (imagecache)
        try_files $uri @rewrite;
        expires 7d;
        log_not_found off;
    }

    location @nobots {
        if ($is_bot) {
            rewrite ^ $scheme://$host$uri? permanent;
        }
        rewrite ^/(.*)$  /index.php?q=$1 last;
    }

    ##
    ## Advagg_css and Advagg_js support.
    ##
    location ~* files/advagg_(?:css|js)/ {
        expires    max;
        etag       off;
        rewrite    ^/files/advagg_(.*)/(.*)$ /sites/$server_name/files/advagg_$1/$2 last;
        add_header ETag '';
        add_header Accept-Ranges '';
        add_header Cache-Control "no-transform, public";
        add_header Last-Modified "Wed, 20 Jan 1988 04:20:42 GMT";
        add_header X-Header "AdvAgg Generator 1.0";
        set $nocache_details "Skip";
        try_files  $uri @nobots;
    }

    location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg|mp4|mkv|mov|wmv|avi)$ {
        # add_header Content-Type "binary/octet-stream";
        log_not_found off;
        expires 1y;
        add_header Pragma public;
        add_header Cache-Control "public, max-age=2592000";
        add_header locationheader 1;
        add_header X-Micro-Cache $upstream_cache_status;
        ## Set the OS file cache.
        open_file_cache max=3000 inactive=120s;
        open_file_cache_valid 45s;
        open_file_cache_min_uses 2;
        open_file_cache_errors off;
        try_files $uri @rewrite;
    }

    location ~* \.(otf|eot|ttf|woff) {
        expires 1y;
        add_header Cache-Control "public, max-age=2592000";
        ## Set the OS file cache.
        open_file_cache max=3000 inactive=120s;
        open_file_cache_valid 45s;
        open_file_cache_min_uses 2;
        open_file_cache_errors off;
        try_files $uri @rewrite;
    }

    location ~ ^/(status|ping)$ {
        allow 127.0.0.1;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_index index.php;
        include fastcgi_params;
        #fastcgi_pass 127.0.0.1:9000;
        fastcgi_pass   unix:/var/run/php-fpm.sock;
    }
    
    if ( $request_method !~ ^(GET|POST|PUT|PATCH|DELETE|HEAD)$ ) {
        return 405;
    }
    include /etc/nginx/vhost.d/post-*.conf;
}
